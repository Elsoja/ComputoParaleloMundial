# Etapa 1: Build
FROM docker.io/library/debian:bookworm AS builder

# Instalar TODAS las dependencias necesarias
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    ninja-build \
    pkg-config \
    libpq-dev \
    libssl-dev \
    curl \
    zip \
    unzip \
    tar \
    bison \
    flex \
    autoconf \
    automake \
    libtool \
    make \
    && rm -rf /var/lib/apt/lists/*

# Instalar vcpkg
WORKDIR /opt
RUN git clone https://github.com/Microsoft/vcpkg.git
WORKDIR /opt/vcpkg
RUN ./bootstrap-vcpkg.sh

# Instalar dependencias C++ necesarias
RUN ./vcpkg install crow:x64-linux \
    libpqxx:x64-linux \
    nlohmann-json:x64-linux \
    activemq-cpp:x64-linux

# Copiar archivos del proyecto
WORKDIR /app
COPY . .

# Compilar el proyecto
RUN cmake -B build -S . \
    -DCMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -G Ninja

RUN cmake --build build --config Release

# Etapa 2: Runtime
FROM docker.io/library/debian:bookworm-slim

# Instalar solo las dependencias de runtime necesarias
RUN apt-get update && apt-get install -y \
    libpq5 \
    libssl3 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Crear usuario no-root
RUN useradd -m -u 1000 tournament && \
    mkdir -p /app && \
    chown -R tournament:tournament /app

WORKDIR /app

# Copiar solo el ejecutable y la configuraci√≥n desde el builder
COPY --from=builder --chown=tournament:tournament \
    /app/build/tournament_consumer/tournament_consumer .
COPY --from=builder --chown=tournament:tournament \
    /app/build/tournament_consumer/configuration.json .

# Cambiar a usuario no-root
USER tournament

# Comando de inicio
CMD ["./tournament_consumer"]